/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }

  interface HTMLAttributes {}
}

import {
  DatePickerItem,
  DatePickerState,
  OptionsState,
  RangePickerState,
} from './models/datepicker.interface';

import {
  DateItemList as DateItemList
} from './components/calendar-date-item/calendar-date-item';

declare global {
  interface HTMLDateItemListElement extends DateItemList, HTMLStencilElement {
  }
  var HTMLDateItemListElement: {
    prototype: HTMLDateItemListElement;
    new (): HTMLDateItemListElement;
  };
  interface HTMLElementTagNameMap {
    "date-item-list": HTMLDateItemListElement;
  }
  interface ElementTagNameMap {
    "date-item-list": HTMLDateItemListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "date-item-list": JSXElements.DateItemListAttributes;
    }
  }
  namespace JSXElements {
    export interface DateItemListAttributes extends HTMLAttributes {
      dataItemConfig?: {
    animation: string,
    itemList: DatePickerItem[]
  };
      dateItemList?: DatePickerItem[];
    }
  }
}


import {
  DatepickerModal as DatepickerModal
} from './components/datepicker-modal/datepicker-modal';

declare global {
  interface HTMLDatepickerModalElement extends DatepickerModal, HTMLStencilElement {
  }
  var HTMLDatepickerModalElement: {
    prototype: HTMLDatepickerModalElement;
    new (): HTMLDatepickerModalElement;
  };
  interface HTMLElementTagNameMap {
    "datepicker-modal": HTMLDatepickerModalElement;
  }
  interface ElementTagNameMap {
    "datepicker-modal": HTMLDatepickerModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "datepicker-modal": JSXElements.DatepickerModalAttributes;
    }
  }
  namespace JSXElements {
    export interface DatepickerModalAttributes extends HTMLAttributes {
      datepickerModel?: DatePickerState;
      optionsModel?: OptionsState;
    }
  }
}


import {
  DatepickerRangeInput as DatepickerRangeInput
} from './components/datepicker-range-input/datepicker-range-input';

declare global {
  interface HTMLDatepickerRangeInputElement extends DatepickerRangeInput, HTMLStencilElement {
  }
  var HTMLDatepickerRangeInputElement: {
    prototype: HTMLDatepickerRangeInputElement;
    new (): HTMLDatepickerRangeInputElement;
  };
  interface HTMLElementTagNameMap {
    "datepicker-range-input": HTMLDatepickerRangeInputElement;
  }
  interface ElementTagNameMap {
    "datepicker-range-input": HTMLDatepickerRangeInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "datepicker-range-input": JSXElements.DatepickerRangeInputAttributes;
    }
  }
  namespace JSXElements {
    export interface DatepickerRangeInputAttributes extends HTMLAttributes {
      optionsModel?: OptionsState;
      rangepickerModel?: RangePickerState;
    }
  }
}


import {
  DatePickerRangeModal as DatepickerRangeModal
} from './components/datepicker-range-modal/datepicker-range-modal';

declare global {
  interface HTMLDatepickerRangeModalElement extends DatepickerRangeModal, HTMLStencilElement {
  }
  var HTMLDatepickerRangeModalElement: {
    prototype: HTMLDatepickerRangeModalElement;
    new (): HTMLDatepickerRangeModalElement;
  };
  interface HTMLElementTagNameMap {
    "datepicker-range-modal": HTMLDatepickerRangeModalElement;
  }
  interface ElementTagNameMap {
    "datepicker-range-modal": HTMLDatepickerRangeModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "datepicker-range-modal": JSXElements.DatepickerRangeModalAttributes;
    }
  }
  namespace JSXElements {
    export interface DatepickerRangeModalAttributes extends HTMLAttributes {
      optionsModel?: OptionsState;
      rangepickerModel?: RangePickerState;
    }
  }
}


import {
  DatepickerSingleInput as DatepickerSingleInput
} from './components/datepicker-single-input/datepicker-single-input';

declare global {
  interface HTMLDatepickerSingleInputElement extends DatepickerSingleInput, HTMLStencilElement {
  }
  var HTMLDatepickerSingleInputElement: {
    prototype: HTMLDatepickerSingleInputElement;
    new (): HTMLDatepickerSingleInputElement;
  };
  interface HTMLElementTagNameMap {
    "datepicker-single-input": HTMLDatepickerSingleInputElement;
  }
  interface ElementTagNameMap {
    "datepicker-single-input": HTMLDatepickerSingleInputElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "datepicker-single-input": JSXElements.DatepickerSingleInputAttributes;
    }
  }
  namespace JSXElements {
    export interface DatepickerSingleInputAttributes extends HTMLAttributes {
      datepickerModel?: DatePickerState;
      optionsModel?: OptionsState;
    }
  }
}


import {
  OuiDatepicker as OuiDatepicker
} from './components/oui-datepicker/oui-datepicker';

declare global {
  interface HTMLOuiDatepickerElement extends OuiDatepicker, HTMLStencilElement {
  }
  var HTMLOuiDatepickerElement: {
    prototype: HTMLOuiDatepickerElement;
    new (): HTMLOuiDatepickerElement;
  };
  interface HTMLElementTagNameMap {
    "oui-datepicker": HTMLOuiDatepickerElement;
  }
  interface ElementTagNameMap {
    "oui-datepicker": HTMLOuiDatepickerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "oui-datepicker": JSXElements.OuiDatepickerAttributes;
    }
  }
  namespace JSXElements {
    export interface OuiDatepickerAttributes extends HTMLAttributes {
      config?: {
    mode: string
    singleValue?: string,
    rangeStartValue?: string,
    rangeEndValue?: string,
    calendarIcon: string,
    angleRightIcon: string,
    angleLeftIcon: string,
    closeIcon: string,
    labels: string,
    activePreviousDate: boolean
  };
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
